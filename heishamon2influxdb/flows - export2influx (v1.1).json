[
    {
        "id": "8981326232694a8d",
        "type": "group",
        "z": "3dca1ce4590fa366",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "aaae14a2ff82a71e",
            "3f9d5719b8a33a92",
            "320a97991eb70927",
            "769d7e214d94c4aa",
            "4508dcd14eb2ee5c",
            "cd0e696b1658d440",
            "d13199f0fe111efd",
            "58ced57d9753d4a4",
            "a5012cabfd3fb8c6"
        ],
        "x": 74,
        "y": 159,
        "w": 1152,
        "h": 222
    },
    {
        "id": "aaae14a2ff82a71e",
        "type": "mqtt in",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "Heishamon",
        "topic": "panasonic_heat_pump/main/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "92e5b2c.00a8b5",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 230,
        "y": 280,
        "wires": [
            [
                "3f9d5719b8a33a92"
            ]
        ]
    },
    {
        "id": "3f9d5719b8a33a92",
        "type": "function",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "Map sensor to ID (main/#)",
        "func": "// if there's an entry in the global defined variable then \n// the value needs to be saved (send) to next function \nvar sensorsplit = msg.topic.split(\"/\");\nvar sensor = sensorsplit[sensorsplit.length-1];\n \nvar sensorvalue = msg.payload;\nfor (i = 0; i < context.global.heishamon.SensorMapping.length; i++) {\n    // when sensor is in the global settings \n    msg.sensor = sensor;\n    if(sensor == context.global.heishamon.SensorMapping[i][0]){\n\n        return msg;\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "4508dcd14eb2ee5c"
            ]
        ]
    },
    {
        "id": "320a97991eb70927",
        "type": "function",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "global setup",
        "func": "if (!context.global.heishamon) {\n  context.global.heishamon = {};\n}\n\ncontext.global.heishamon.HAapplication = \"InfluxDB\";\n\n//This is the overview of sensors which has to be sent to the Home Automation system\ncontext.global.heishamon.SensorMapping = [\n        //  [\"name of topic\"]\n        // MAIN/#\n            [\"Heatpump_State\"],\n            [\"Pump_Flow\"],\n            [\"Force_DHW_State\"],\n            [\"Quiet_Mode_Schedule\"],\n            [\"Operating_Mode_State\"],\n            [\"Main_Inlet_Temp\"],\n            [\"Main_Outlet_Temp\"],\n            [\"Main_Target_Temp\"],\n            [\"Compressor_Freq\"],\n            [\"DHW_Target_Temp\"],\n            [\"DHW_Temp\"],\n            [\"Operations_Hours\"],\n            [\"Operations_Counter\"],\n            [\"Main_Schedule_State\"],\n            [\"Outside_Temp\"],\n            [\"Heat_Energy_Production\"],\n            [\"Heat_Energy_Consumption\"],\n            [\"Powerful_Mode_Time\"],\n            [\"Quiet_Mode_Level\"],\n            [\"Holiday_Mode_State\"],\n            [\"ThreeWay_Valve_State\"],\n            [\"Outside_Pipe_Temp\"],\n            [\"DHW_Heat_Delta\"],\n            [\"Heat_Delta\"],\n            [\"Cool_Delta\"],\n            [\"DHW_Holiday_Shift_Temp\"],\n            [\"Defrosting_State\"],\n            [\"Z1_Heat_Request_Temp\"],\n            [\"Z1_Cool_Request_Temp\"],\n            [\"Z1_Heat_Curve_Target_High_Temp\"],\n            [\"Z1_Heat_Curve_Target_Low_Temp\"],\n            [\"Z1_Heat_Curve_Outside_High_Temp\"],\n            [\"Z1_Heat_Curve_Outside_Low_Temp\"],\n            [\"Room_Thermostat_Temp\"],\n            [\"Z2_Heat_Request_Temp\"],\n            [\"Z2_Cool_Request_Temp\"],\n            [\"Z1_Water_Temp\"],\n            [\"Z2_Water_Temp\"],\n            [\"Cool_Energy_Production\"],\n            [\"Cool_Energy_Consumption\"],\n            [\"DHW_Energy_Production\"],\n            [\"DHW_Energy_Consumption\"],\n            [\"Z1_Water_Target_Temp\"],\n            [\"Z2_Water_Target_Temp\"],\n            [\"Error\"],\n            [\"Room_Holiday_Shift_Temp\"],\n            [\"Buffer_Temp\"],\n            [\"Solar_Temp\"],\n            [\"Pool_Temp\"],\n            [\"Main_Hex_Outlet_Temp\"],\n            [\"Discharge_Temp\"],\n            [\"Inside_Pipe_Temp\"],\n            [\"Defrost_Temp\"],\n            [\"Eva_Outlet_Temp\"],\n            [\"Bypass_Outlet_Temp\"],\n            [\"Ipm_Temp\"],\n            [\"Z1_Temp\"],\n            [\"Z2_Temp\"],\n            [\"DHW_Heater_State\"],\n            [\"Room_Heater_State\"],\n            [\"Internal_Heater_State\"],\n            [\"External_Heater_State\"],\n            [\"Fan1_Motor_Speed\"],\n            [\"Fan2_Motor_Speed\"],\n            [\"High_Pressure\"],\n            [\"Pump_Speed\"],\n            [\"Low_Pressure\"],\n            [\"Compressor_Current\"],\n            [\"Force_Heater_State\"],\n            [\"Sterilization_State\"],\n            [\"Sterilization_Temp\"],\n            [\"Sterilization_Max_Time\"],\n            [\"Z1_Cool_Curve_Target_High_Temp\"],\n            [\"Z1_Cool_Curve_Target_Low_Temp\"],\n            [\"Z1_Cool_Curve_Outside_High_Temp\"],\n            [\"Z1_Cool_Curve_Outside_Low_Temp\"],\n            [\"Heating_Mode\"],\n            [\"Heating_Off_Outdoor_Temp\"],\n            [\"Heater_On_Outdoor_Temp\"],\n            [\"Heat_To_Cool_Temp\"],\n            [\"Cool_To_Heat_Temp\"],\n            [\"Cooling_Mode\"],\n            [\"Z2_Heat_Curve_Target_High_Temp\"],\n            [\"Z2_Heat_Curve_Target_Low_Temp\"],\n            [\"Z2_Heat_Curve_Outside_High_Temp\"],\n            [\"Z2_Heat_Curve_Outside_Low_Temp\"],\n            [\"Z2_Cool_Curve_Target_High_Temp\"],\n            [\"Z2_Cool_Curve_Target_Low_Temp\"],\n            [\"Z2_Cool_Curve_Outside_High_Temp\"],\n            [\"Z2_Cool_Curve_Outside_Low_Temp\"],\n            [\"Room_Heater_Operations_Hours\"],\n            [\"DHW_Heater_Operations_Hours\"],\n            [\"Heat_Pump_Model\"],\n            [\"Pump_Duty\"],\n            [\"Zones_State\"],\n            [\"Max_Pump_Duty\"],\n            [\"Heater_Delay_Time\"],\n            [\"Heater_Start_Delta\"],\n            [\"Heater_Stop_Delta\"],\n            [\"Buffer_Installed\"],\n            [\"DHW_Installed\"],\n            [\"Solar_Mode\"],\n            [\"Solar_On_Delta\"],\n            [\"Solar_Off_Delta\"],\n            [\"Solar_Frost_Protection\"],\n            [\"Solar_High_Limit\"],\n\n        // S0/#\n            [\"Watthour/1\"],\n            [\"WatthourTotal/1\"],\n            [\"Watt/1\"],\n            [\"Watthour/2\"],\n            [\"WatthourTotal/2\"],\n            [\"Watt/2\"]\n\n    ];\n    \ncontext.global.heishamon.ActionMapping = [\n    // actioncommand\n    [\"SetHeatpump\"],\n    [\"SetHoliday\"],\n    [\"SetQuietMode\"],\n    [\"SetPowerfull\"],\n    [\"SetZ1HeatRequestTemperature\"],\n    [\"SetZ1CoolRequestTemperature\"],\n    [\"SetZ2HeatRequestTemperature\"],\n    [\"SetZ2CoolRequestTemperature\"],\n    [\"SetOperationMode\"],\n    [\"SetForceDHW\"],\n    [\"SetDHWTemp\"],\n    [\"SetCoolTemp\"],\n    [\"SetForceDefrost\"],\n    [\"SetForceSterilization\"]\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "769d7e214d94c4aa",
        "type": "inject",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Startup",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "320a97991eb70927"
            ]
        ]
    },
    {
        "id": "4508dcd14eb2ee5c",
        "type": "function",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "Prepare InfluxDB output",
        "func": "if(isNaN(parseFloat(msg.payload))){\n    return;\n}else{\n    \n    msg.payload = [{\n        numValue: parseFloat(msg.payload),\n        strValue: msg.sensor\n    },\n    {\n        topic:msg.sensor\n    }];\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "d13199f0fe111efd"
            ]
        ]
    },
    {
        "id": "cd0e696b1658d440",
        "type": "comment",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "Send Heishamon to INFLUXdb",
        "info": "",
        "x": 230,
        "y": 200,
        "wires": []
    },
    {
        "id": "d13199f0fe111efd",
        "type": "influxdb out",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "influxdb": "c38793a96c45b9e5",
        "name": "Panasonic heatpump",
        "measurement": "heishamon",
        "precision": "",
        "retentionPolicy": "",
        "database": "Panasonic",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "Home",
        "bucket": "Panasonic heatpump",
        "x": 1100,
        "y": 280,
        "wires": []
    },
    {
        "id": "58ced57d9753d4a4",
        "type": "mqtt in",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "Heishamon",
        "topic": "panasonic_heat_pump/s0/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "92e5b2c.00a8b5",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 230,
        "y": 340,
        "wires": [
            [
                "a5012cabfd3fb8c6"
            ]
        ]
    },
    {
        "id": "a5012cabfd3fb8c6",
        "type": "function",
        "z": "3dca1ce4590fa366",
        "g": "8981326232694a8d",
        "name": "Map sensor to ID (s0/#)",
        "func": "// if there's an entry in the global defined variable then \n// the value needs to be saved (send) to next function \nvar sensorsplit = msg.topic.split(\"s0/\");\nvar sensor = sensorsplit[sensorsplit.length-1];\n \nvar sensorvalue = msg.payload;\nfor (i = 0; i < context.global.heishamon.SensorMapping.length; i++) {\n    // when sensor is in the global settings \n    msg.sensor = sensor;\n    if(sensor == context.global.heishamon.SensorMapping[i][0]){\n\n        return msg;\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "4508dcd14eb2ee5c"
            ]
        ]
    },
    {
        "id": "92e5b2c.00a8b5",
        "type": "mqtt-broker",
        "name": "MQTT (x.x.x.x)",
        "broker": "x.x.x.x",
        "port": "1883",
        "clientid": "Node_Red_Client",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c38793a96c45b9e5",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "https",
        "database": "test",
        "name": "InfluxDB",
        "usetls": true,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://x.x.x.x:8086",
        "rejectUnauthorized": false
    }
]